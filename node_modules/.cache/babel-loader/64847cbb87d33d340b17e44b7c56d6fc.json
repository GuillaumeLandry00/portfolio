{"ast":null,"code":"import * as React from 'react';\nimport { View } from 'react-native';\nimport normalizeColor from 'react-native-web/src/modules/normalizeColor';\nexport default function NativeLinearGradient({\n  colors,\n  locations,\n  startPoint,\n  endPoint,\n  ...props\n}) {\n  const [layout, setLayout] = React.useState(null);\n  const {\n    width = 1,\n    height = 1\n  } = layout ?? {};\n  const pseudoAngle = React.useMemo(() => {\n    const getControlPoints = () => {\n      let correctedStartPoint = [0, 0];\n\n      if (Array.isArray(startPoint)) {\n        correctedStartPoint = [startPoint[0] != null ? startPoint[0] : 0.0, startPoint[1] != null ? startPoint[1] : 0.0];\n      }\n\n      let correctedEndPoint = [0.0, 1.0];\n\n      if (Array.isArray(endPoint)) {\n        correctedEndPoint = [endPoint[0] != null ? endPoint[0] : 0.0, endPoint[1] != null ? endPoint[1] : 1.0];\n      }\n\n      return [correctedStartPoint, correctedEndPoint];\n    };\n\n    const [start, end] = getControlPoints();\n    start[0] *= width;\n    end[0] *= width;\n    start[1] *= height;\n    end[1] *= height;\n    const py = end[1] - start[1];\n    const px = end[0] - start[0];\n    return 90 + Math.atan2(py, px) * 180 / Math.PI;\n  }, [width, height, startPoint, endPoint]);\n  const gradientColors = React.useMemo(() => {\n    return colors.map((color, index) => {\n      const hexColor = normalizeColor(color);\n      let output = hexColor;\n\n      if (locations && locations[index]) {\n        const location = Math.max(0, Math.min(1, locations[index])); // Convert 0...1 to 0...100\n\n        const percentage = location * 100;\n        output += ` ${percentage}%`;\n      }\n\n      return output;\n    });\n  }, [colors, locations]);\n  const colorStyle = gradientColors.join(',');\n  const backgroundImage = `linear-gradient(${pseudoAngle}deg, ${colorStyle})`; // TODO(Bacon): In the future we could consider adding `backgroundRepeat: \"no-repeat\"`. For more\n  // browser support.\n\n  return React.createElement(View, { ...props,\n    style: [props.style, // @ts-ignore: [ts] Property 'backgroundImage' does not exist on type 'ViewStyle'.\n    {\n      backgroundImage\n    }],\n    onLayout: event => {\n      const {\n        x,\n        y,\n        width,\n        height\n      } = event.nativeEvent.layout;\n      const oldLayout = layout ?? {\n        x: 0,\n        y: 0,\n        width: 1,\n        height: 1\n      }; // don't set new layout state unless the layout has actually changed\n\n      if (x !== oldLayout.x || y !== oldLayout.y || width !== oldLayout.width || height !== oldLayout.height) {\n        setLayout({\n          x,\n          y,\n          width,\n          height\n        });\n      }\n\n      if (props.onLayout) {\n        props.onLayout(event);\n      }\n    }\n  });\n}","map":{"version":3,"sources":["../src/NativeLinearGradient.web.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { LayoutRectangle, View } from 'react-native';\nimport normalizeColor from 'react-native-web/src/modules/normalizeColor';\n\nimport { NativeLinearGradientPoint, NativeLinearGradientProps } from './NativeLinearGradient.types';\n\nexport default function NativeLinearGradient({\n  colors,\n  locations,\n  startPoint,\n  endPoint,\n  ...props\n}: NativeLinearGradientProps): React.ReactElement {\n  const [layout, setLayout] = React.useState<LayoutRectangle | null>(null);\n\n  const { width = 1, height = 1 } = layout ?? {};\n\n  const pseudoAngle = React.useMemo(() => {\n    const getControlPoints = (): NativeLinearGradientPoint[] => {\n      let correctedStartPoint: NativeLinearGradientPoint = [0, 0];\n      if (Array.isArray(startPoint)) {\n        correctedStartPoint = [\n          startPoint[0] != null ? startPoint[0] : 0.0,\n          startPoint[1] != null ? startPoint[1] : 0.0,\n        ];\n      }\n      let correctedEndPoint: NativeLinearGradientPoint = [0.0, 1.0];\n      if (Array.isArray(endPoint)) {\n        correctedEndPoint = [\n          endPoint[0] != null ? endPoint[0] : 0.0,\n          endPoint[1] != null ? endPoint[1] : 1.0,\n        ];\n      }\n      return [correctedStartPoint, correctedEndPoint];\n    };\n\n    const [start, end] = getControlPoints();\n    start[0] *= width;\n    end[0] *= width;\n    start[1] *= height;\n    end[1] *= height;\n    const py = end[1] - start[1];\n    const px = end[0] - start[0];\n\n    return 90 + (Math.atan2(py, px) * 180) / Math.PI;\n  }, [width, height, startPoint, endPoint]);\n\n  const gradientColors = React.useMemo(() => {\n    return colors.map((color: number, index: number): string => {\n      const hexColor = normalizeColor(color);\n      let output = hexColor;\n      if (locations && locations[index]) {\n        const location = Math.max(0, Math.min(1, locations[index]));\n        // Convert 0...1 to 0...100\n        const percentage = location * 100;\n        output += ` ${percentage}%`;\n      }\n      return output;\n    });\n  }, [colors, locations]);\n\n  const colorStyle = gradientColors.join(',');\n  const backgroundImage = `linear-gradient(${pseudoAngle}deg, ${colorStyle})`;\n  // TODO(Bacon): In the future we could consider adding `backgroundRepeat: \"no-repeat\"`. For more\n  // browser support.\n  return (\n    <View\n      {...props}\n      style={[\n        props.style,\n        // @ts-ignore: [ts] Property 'backgroundImage' does not exist on type 'ViewStyle'.\n        { backgroundImage },\n      ]}\n      onLayout={(event) => {\n        const { x, y, width, height } = event.nativeEvent.layout;\n        const oldLayout = layout ?? { x: 0, y: 0, width: 1, height: 1 };\n        // don't set new layout state unless the layout has actually changed\n        if (\n          x !== oldLayout.x ||\n          y !== oldLayout.y ||\n          width !== oldLayout.width ||\n          height !== oldLayout.height\n        ) {\n          setLayout({ x, y, width, height });\n        }\n\n        if (props.onLayout) {\n          props.onLayout(event);\n        }\n      }}\n    />\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}